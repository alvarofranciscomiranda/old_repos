#include "Product.h"
#include <iostream>

using namespace std;

Product::Product(string name,string code, float price, string description) :name(name), code(code), price(price), description(description)
{}

Product::~Product(){

}

string Product::getName() const{
    return name;
}

string Product::getCode() const{
    return code;
}

float Product::getPrice() const{
    return price;
}

string Product::getDescription() const{
    return description;
}

void Product::setName(string name){
    this->name = name;
}

void Product::setCode(string code){
	this->code = code;
}

void Product::setPrice(float price){
    this->price = price;
}

void Product::setDescription(string description){
    this->description = description;
}


bool Product::operator==(const Product* & c) const{
	return (this->name == c->name && this->code == c->code && this->price == c->price);
}

Medicine::Medicine(string name,string code, float price, string description, bool prescription, bool needed, int discount):Product(name, code, price, description), prescription(prescription), needed(needed), discount(discount){
}

Medicine::Medicine(string product){
    unsigned long stop; //stop is pos for last ';' found

    //type must be medicine
    stop = product.find_first_of('/');

    //name
    product = product.substr(stop+2);
    stop = product.find_first_of('/');
    this->name = product.substr(0,stop);

    //code
    product = product.substr(stop+2);
    stop = product.find_first_of('/');
    this->code = product.substr(0,stop);

    //price
    product = product.substr(stop +2);
    stop = product.find_first_of('/');
    this->price = stof(product.substr(0, stop));

    //description
    product = product.substr(stop +2);
    stop = product.find_first_of('/');
    this->description = product.substr(0, stop);

    product = product.substr(stop +2);
    stop = product.find_first_of('/');
    if(product.substr(0, stop) == "true")
    	this->prescription = true;
    else if(product.substr(0, stop) == "false")
        this->prescription = false;

    product = product.substr(stop +2);
    stop = product.find_first_of('/');
    if(product.substr(0, stop) == "true")
       this->needed = true;
    else if(product.substr(0, stop) == "false")
    	this->needed = false;

    //price
    product = product.substr(stop +2);
    stop = product.find_first_of('/');
    this->discount = stoi(product.substr(0, stop));
}


 Medicine::~Medicine(){

}

bool Medicine::getPrescription() const{
    return prescription;
}

bool Medicine::getNeeded() const{
    return needed;
}

int Medicine::getDiscount() const{
    return discount;
}

void Medicine::setPrescription(bool prescription){
    this->prescription = prescription;
}

void Medicine::setNeeded(bool needed){
	this->needed = needed;
}

void Medicine::setDiscount(int discount){
    this->discount = discount;
}

string Medicine::getTypeProduct() const{
	return "medicine";
}

float Medicine::getTotalPrice() const{
	if(prescription && needed)
		return price - (price*discount/100);

	return price;
}

void Medicine::printProductInfo() const{

    cout << "Name: " << name << endl;
    cout << "Code: " << code << endl;
    cout << "Price: " << price << endl;
    cout << "Description: " << description << endl;
    cout << "Can be prescripted: " << prescription << endl;
    cout << "Prescription obligatory: " << needed << endl;
    cout << "Discount: " << discount << endl;
    cout << endl;
}

void Medicine::printSimplifiedInfo(ostream & os) const{
	os << name << '/' << code << '/' << price << '/' << description << "/Medicine/" << prescription << '/' << needed << '/' << discount;
}


Other::Other(string name,string code, float price, string description):Product(name, code, price, description){
}

Other::Other(string product){
    unsigned long stop; //stop is pos for last ';' found

    //type must be other
    stop = product.find_first_of('/');

    //name
    product = product.substr(stop+2);
    stop = product.find_first_of('/');
    this->name = product.substr(0,stop);

    //code
    product = product.substr(stop+2);
    stop = product.find_first_of('/');
    this->code = product.substr(0,stop);

    //price
    product = product.substr(stop +2);
    stop = product.find_first_of('/');
    this->price = stof(product.substr(0, stop));

    //description
    product = product.substr(stop +2);
    stop = product.find_first_of('/');
    this->description = product.substr(0, stop);

}

Other::~Other(){

}

string Other::getTypeProduct() const{
	return "other";
}

float Other::getTotalPrice() const{
	return this->price;
}

void Other::printProductInfo() const{
    cout << "Name: " << name << endl;
    cout << "Code: " << code << endl;
    cout << "Price: " << price << endl;
    cout << "Description: " << description << endl;
    cout << endl << endl;
}

void Other::printSimplifiedInfo(ostream & os) const{
	os << name << '/' << code << '/' << price << '/' << description << "/Other/";
}




